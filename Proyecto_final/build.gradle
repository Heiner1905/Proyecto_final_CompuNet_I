plugins {
    id 'java'
    id "com.zeroc.gradle.ice-builder.slice" version "1.5.0" apply false
}
subprojects {
    apply plugin: 'java'
    apply plugin: 'com.zeroc.gradle.ice-builder.slice'
    slice {
        java {
            files = [file('../slice/App.ice')]
        }
    }


    group = 'org.example'
    version = '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    dependencies {
        implementation 'com.zeroc:ice:3.7.10'
        testImplementation platform('org.junit:junit-bom:5.10.0')
        testImplementation 'org.junit.jupiter:junit-jupiter'
    }

    if (!project.name.equals("client")) {
        // Registra una tarea para copiar el JAR de Ice a la carpeta de dependencias del JAR ejecutable
        tasks.register("copyIceJar", Copy) {
            from(configurations.runtimeClasspath)
            include('ice-3.7.10.jar') // Solo copia el JAR de Ice runtime
            into(layout.buildDirectory.dir("libs")) // Copia a 'build/libs' del módulo
        }

        // Asegura que la tarea 'jar' dependa de 'copyIceJar'
        tasks.named("jar") {
            dependsOn("copyIceJar")
        }

        // Configuración del manifiesto para que el JAR sea ejecutable
        jar {
            manifest {
                attributes(
                        'Main-Class': // Define la clase principal para cada módulo
                                project.name.equals("master") ? 'Server' : // Si es el módulo 'master', la clase es 'Server'
                                        project.name.equals("worker") ? 'ClientWorker' : // Si es el módulo 'worker', la clase es 'ClientWorker'
                                                null, // Para otros módulos (aunque estamos en un 'if' que excluye 'client')
                        'Class-Path': configurations.runtimeClasspath.files.collect { "${it.name}" }.join(' ') // Lista de JARs en el classpath
                )
            }
        }
    }

    test {
        useJUnitPlatform()
    }
}