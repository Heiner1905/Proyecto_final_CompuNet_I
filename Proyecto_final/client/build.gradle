plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

javafx {
    version = "17"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

dependencies {
    implementation 'com.zeroc:ice:3.7.10'
}

application {
    mainClass = 'client.MainApp'
}

run {
    def javafxSdkLibPath = "C:\\Users\\David\\Downloads\\openjfx-17.0.15_windows-x64_bin-sdk\\javafx-sdk-17.0.15\\lib" // <<< ¡CAMBIA ESTA RUTA!

    jvmArgs = [
            '--module-path', javafxSdkLibPath,
            '--add-modules', 'javafx.controls,javafx.fxml'
    ]
}

task consoleJar(type: Jar) {
    // Nombre del JAR generado para el cliente de consola
    archiveBaseName.set('client-console')
    archiveClassifier.set('') // Puedes usar 'console' si quieres, ej: client-console-1.0-SNAPSHOT-console.jar

    // Incluye las clases compiladas del módulo 'client'
    from sourceSets.main.output

    // Configura el manifiesto para el JAR ejecutable de consola
    manifest {
        attributes 'Main-Class': 'Client', // 'Client' porque Client.java está en el paquete por defecto
                'Class-Path': configurations.runtimeClasspath.files.collect { "libs/${it.getName()}" }.join(' ')
        // Las dependencias estarán en una subcarpeta 'libs/'
    }

    doLast {
        copy {
            from configurations.runtimeClasspath
            into "${archiveFile.get().getAsFile().parentFile}/libs"
            // Copia a la misma carpeta que el JAR, dentro de 'libs'
        }
    }
}